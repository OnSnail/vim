snippet head
abbr head comment
options head
  // Copyright (C) 2014-`strftime("%Y")` Yottabyte the original author or authors.
  // wuranbo(wu.ranbo@yottabyte.cn)
  // `substitute(system('git rev-parse --show-prefix'), '\n', '', '')``expand('%:t')`
  // `strftime("%Y/%m/%d")`
  ${0}

snippet     filegit
abbr        filefullname relative git `substitute(system('git rev-parse --show-prefix'), '\n', '', '')``expand('%:t')`
  `substitute(system('git rev-parse --show-prefix'), '\n', '', '')``expand('%:t')`

snippet     todo
abbr        todo
  // TODO(wu.ranbo@yottabyte.cn) ${0}

snippet     pr
abbr        fmt.Printf("%v\n", v)
  fmt.Printf("${1:%v}\n"${2:, value}) ${0}

snippet     pl
abbr        fmt.Println("")
  fmt.Println("${1:saysome}"${2:, other}) ${0}

snippet     errl
abbr        if err!=nil{log.Fatal(err)}
  if err != nil {
    ${1:log.Fatal(err)}
  } ${0}

snippet     funcinit
abbr        func init() {}
alias       funci
  func init() {
    ${0}
  }

snippet     bug
abbr        // BUG(wuranbo):
  // BUG(wu.ranbo):

# defer recover
snippet defr
alias deferr
	defer func() {
		if err := recover(); err != nil {
			${0}
		}
	}()

# defer
snippet df
alias deferf
abbr defer someFunction()
	defer ${1:func}(${2}) ${0}

snippet def
abbr defer func() { ... }
alias defer
	defer func() {
		${0}
	}()
# defer recover

snippet     this.d
abbr        this.Data[""]=
alias       data
  this.Data["${1}"] = ${2}

snippet message
alias newmessage
abbr MESSAGE="|!-SEP|SOMEMESSAGE|!-SEP|"
  %uc($1) string = "|!-$SEPERATOR|%uc($1)|!-$SEPERATOR|"
  %uc($1): "${1:name}",
  $1 = ${2:zhCN trans}

snippet errn
abbr if err != nil {return err}
  if err != nil {
    return ${2}err
  }${0}

snippet logen
abbr if err != nil {return err}
  if err != nil {
    return ${3}log.Error("${1} failed!",
    " when ${2} with error:", err)
  }${0}


snippet begindefer
abbr if err := o.Begin(); err != nil { return err}
  o := orm.NewOrm()
  if err = o.Begin(); err != nil {
    return ${2}log.TransactionError()
  }
  defer func() {
    if err == utils.TransactionError {
      return
    }
    if err != nil {
      if err = o.Rollback(); err != nil {
        err = log.TransactionError()
      }
    } else {
      if err = o.Commit(); err != nil {
        err = log.TransactionError()
      }
    }
  }()
  ${0}

snippet loge
abbr log.Error("", err)
  log.Error("${1} failed!", err)${0}


snippet     deftrans
abbr        defer func(){ TransactionError }
options     head
  defer func() {
    if err == utils.TransactionError {
      return
    }
    if err != nil {
      if err = o.Rollback(); err != nil {
        err = log.TransactionError()
      }
    } else {
      if err = o.Commit(); err != nil {
        err = log.TransactionError()
      }
    }
  }()

